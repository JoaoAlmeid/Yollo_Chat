
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.17.0
 * Query Engine version: 393aa359c9ad4a4bb28630fb5613f9c281cde053
 */
Prisma.prismaVersion = {
  client: "5.17.0",
  engine: "393aa359c9ad4a4bb28630fb5613f9c281cde053"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AnnouncementScalarFieldEnum = {
  id: 'id',
  priority: 'priority',
  title: 'title',
  text: 'text',
  mediaPath: 'mediaPath',
  mediaName: 'mediaName',
  companyId: 'companyId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RelationLoadStrategy = {
  query: 'query',
  join: 'join'
};

exports.Prisma.BaileysScalarFieldEnum = {
  id: 'id',
  contacts: 'contacts',
  chats: 'chats',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  whatsappId: 'whatsappId'
};

exports.Prisma.BaileysChatsScalarFieldEnum = {
  id: 'id',
  jid: 'jid',
  conversationTimestamp: 'conversationTimestamp',
  unreadCount: 'unreadCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  whatsappId: 'whatsappId'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  message1: 'message1',
  message2: 'message2',
  message3: 'message3',
  message4: 'message4',
  message5: 'message5',
  confirmationMessage1: 'confirmationMessage1',
  confirmationMessage2: 'confirmationMessage2',
  confirmationMessage3: 'confirmationMessage3',
  confirmationMessage4: 'confirmationMessage4',
  confirmationMessage5: 'confirmationMessage5',
  status: 'status',
  confirmation: 'confirmation',
  mediaPath: 'mediaPath',
  mediaName: 'mediaName',
  scheduledAt: 'scheduledAt',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId',
  contactListId: 'contactListId',
  whatsappId: 'whatsappId',
  fileListId: 'fileListId'
};

exports.Prisma.CampaignSettingScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId'
};

exports.Prisma.CampaignShippingScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  number: 'number',
  message: 'message',
  confirmationMessage: 'confirmationMessage',
  confirmation: 'confirmation',
  contactId: 'contactId',
  campaignId: 'campaignId',
  confirmationRequestedAt: 'confirmationRequestedAt',
  confirmedAt: 'confirmedAt',
  deliveredAt: 'deliveredAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  title: 'title',
  ownerId: 'ownerId',
  lastMessage: 'lastMessage',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  senderId: 'senderId',
  message: 'message',
  mediaPath: 'mediaPath',
  mediaName: 'mediaName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatUserScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  userId: 'userId',
  unreads: 'unreads',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  email: 'email',
  status: 'status',
  dueDate: 'dueDate',
  recurrence: 'recurrence',
  planId: 'planId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  name: 'name',
  number: 'number',
  email: 'email',
  profilePicUrl: 'profilePicUrl',
  isGroup: 'isGroup',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId',
  whatsappId: 'whatsappId'
};

exports.Prisma.ContactCustomFieldScalarFieldEnum = {
  id: 'id',
  name: 'name',
  value: 'value',
  contactId: 'contactId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactListScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId'
};

exports.Prisma.ContactListItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  number: 'number',
  email: 'email',
  isWhatsappValid: 'isWhatsappValid',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId',
  contactListId: 'contactListId'
};

exports.Prisma.FilesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  message: 'message',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId'
};

exports.Prisma.FilesOptionsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  path: 'path',
  mediaType: 'mediaType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  fileId: 'fileId'
};

exports.Prisma.HelpScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  video: 'video',
  link: 'link',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  detail: 'detail',
  status: 'status',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dueDate: 'dueDate',
  companyId: 'companyId'
};

exports.Prisma.System_LogsScalarFieldEnum = {
  id: 'id',
  level: 'level',
  message: 'message',
  createdAt: 'createdAt',
  actionLogId: 'actionLogId'
};

exports.Prisma.Action_LogsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  ticketId: 'ticketId',
  action: 'action',
  message: 'message',
  createdAt: 'createdAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  remoteJid: 'remoteJid',
  participant: 'participant',
  dataJson: 'dataJson',
  ack: 'ack',
  read: 'read',
  fromMe: 'fromMe',
  body: 'body',
  mediaUrl: 'mediaUrl',
  mediaType: 'mediaType',
  isDeleted: 'isDeleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  quotedMsgId: 'quotedMsgId',
  ticketId: 'ticketId',
  contactId: 'contactId',
  companyId: 'companyId',
  queueId: 'queueId'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  users: 'users',
  connections: 'connections',
  queues: 'queues',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  useSchedules: 'useSchedules',
  useCampaigns: 'useCampaigns',
  useInternalChat: 'useInternalChat',
  useExternalApi: 'useExternalApi',
  useKanban: 'useKanban',
  useOpenAi: 'useOpenAi',
  useIntegrations: 'useIntegrations'
};

exports.Prisma.PromptScalarFieldEnum = {
  id: 'id',
  name: 'name',
  prompt: 'prompt',
  apiKey: 'apiKey',
  maxMessages: 'maxMessages',
  maxTokens: 'maxTokens',
  temperature: 'temperature',
  promptTokens: 'promptTokens',
  completionTokens: 'completionTokens',
  totalTokens: 'totalTokens',
  voice: 'voice',
  voiceKey: 'voiceKey',
  voiceRegion: 'voiceRegion',
  queueId: 'queueId',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QueueScalarFieldEnum = {
  id: 'id',
  name: 'name',
  color: 'color',
  greetingMessage: 'greetingMessage',
  outOfHoursMessage: 'outOfHoursMessage',
  schedules: 'schedules',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId',
  orderQueue: 'orderQueue',
  integrationId: 'integrationId',
  promptId: 'promptId'
};

exports.Prisma.QueueIntegrationsScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  projectName: 'projectName',
  jsonContent: 'jsonContent',
  language: 'language',
  urlN8N: 'urlN8N',
  companyId: 'companyId',
  typebotSlug: 'typebotSlug',
  typebotExpires: 'typebotExpires',
  typebotKeywordFinish: 'typebotKeywordFinish',
  typebotUnknownMessage: 'typebotUnknownMessage',
  typebotDelayMessage: 'typebotDelayMessage',
  typebotKeywordRestart: 'typebotKeywordRestart',
  typebotRestartMessage: 'typebotRestartMessage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QueueOptionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  option: 'option',
  queueId: 'queueId',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuickMessageScalarFieldEnum = {
  id: 'id',
  shortcode: 'shortcode',
  message: 'message',
  mediaName: 'mediaName',
  mediaPath: 'mediaPath',
  companyId: 'companyId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RatingScalarFieldEnum = {
  id: 'id',
  name: 'name',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScheduleScalarFieldEnum = {
  id: 'id',
  body: 'body',
  sendAt: 'sendAt',
  sentAt: 'sentAt',
  status: 'status',
  mediaPath: 'mediaPath',
  mediaName: 'mediaName',
  contactId: 'contactId',
  ticketId: 'ticketId',
  userId: 'userId',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SettingScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  isActive: 'isActive',
  userPriceCents: 'userPriceCents',
  whatsPriceCents: 'whatsPriceCents',
  lastInvoiceUrl: 'lastInvoiceUrl',
  lastPlanChange: 'lastPlanChange',
  expiresAt: 'expiresAt',
  providerSubscriptionId: 'providerSubscriptionId',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  color: 'color',
  companyId: 'companyId',
  kanban: 'kanban',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TicketScalarFieldEnum = {
  id: 'id',
  status: 'status',
  unreadMessages: 'unreadMessages',
  lastMessage: 'lastMessage',
  isGroup: 'isGroup',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  contactId: 'contactId',
  whatsappId: 'whatsappId',
  queueId: 'queueId',
  chatbot: 'chatbot',
  queueOptionId: 'queueOptionId',
  companyId: 'companyId',
  uuid: 'uuid',
  useIntegration: 'useIntegration',
  integrationId: 'integrationId',
  typebotSessionId: 'typebotSessionId',
  typebotStatus: 'typebotStatus',
  promptId: 'promptId',
  fromMe: 'fromMe',
  amountUsedBotQueues: 'amountUsedBotQueues',
  isBot: 'isBot'
};

exports.Prisma.TicketNoteScalarFieldEnum = {
  id: 'id',
  note: 'note',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  contactId: 'contactId',
  ticketId: 'ticketId'
};

exports.Prisma.TicketTagScalarFieldEnum = {
  ticketId: 'ticketId',
  tagId: 'tagId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TicketTrackingScalarFieldEnum = {
  id: 'id',
  ticketId: 'ticketId',
  companyId: 'companyId',
  whatsappId: 'whatsappId',
  userId: 'userId',
  rated: 'rated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  startedAt: 'startedAt',
  queuedAt: 'queuedAt',
  finishedAt: 'finishedAt',
  closedAt: 'closedAt',
  ratingAt: 'ratingAt',
  chatbotAt: 'chatbotAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  passwordHash: 'passwordHash',
  tokenVersion: 'tokenVersion',
  profile: 'profile',
  super: 'super',
  online: 'online',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId',
  whatsappId: 'whatsappId',
  avatarUrl: 'avatarUrl'
};

exports.Prisma.UserQueueScalarFieldEnum = {
  userId: 'userId',
  queueId: 'queueId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserRatingScalarFieldEnum = {
  id: 'id',
  ticketId: 'ticketId',
  companyId: 'companyId',
  userId: 'userId',
  rate: 'rate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WhatsappScalarFieldEnum = {
  id: 'id',
  name: 'name',
  session: 'session',
  qrcode: 'qrcode',
  status: 'status',
  battery: 'battery',
  plugged: 'plugged',
  retries: 'retries',
  greetingMessage: 'greetingMessage',
  farewellMessage: 'farewellMessage',
  complationMessage: 'complationMessage',
  outOfHoursMessage: 'outOfHoursMessage',
  ratingMessage: 'ratingMessage',
  provider: 'provider',
  isDefault: 'isDefault',
  token: 'token',
  transferQueueId: 'transferQueueId',
  timeToTransfer: 'timeToTransfer',
  maxUseBotQueues: 'maxUseBotQueues',
  timeUseBotQueues: 'timeUseBotQueues',
  sendIdQueue: 'sendIdQueue',
  timeSendQueue: 'timeSendQueue',
  integrationId: 'integrationId',
  expiresTicket: 'expiresTicket',
  expiresInactiveMessage: 'expiresInactiveMessage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId',
  promptId: 'promptId'
};

exports.Prisma.WhatsappQueueScalarFieldEnum = {
  whatsappId: 'whatsappId',
  queueId: 'queueId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  Announcement: 'Announcement',
  Baileys: 'Baileys',
  BaileysChats: 'BaileysChats',
  Campaign: 'Campaign',
  CampaignSetting: 'CampaignSetting',
  CampaignShipping: 'CampaignShipping',
  Chat: 'Chat',
  ChatMessage: 'ChatMessage',
  ChatUser: 'ChatUser',
  Company: 'Company',
  Contact: 'Contact',
  ContactCustomField: 'ContactCustomField',
  ContactList: 'ContactList',
  ContactListItem: 'ContactListItem',
  Files: 'Files',
  FilesOptions: 'FilesOptions',
  Help: 'Help',
  Invoice: 'Invoice',
  System_Logs: 'System_Logs',
  Action_Logs: 'Action_Logs',
  Message: 'Message',
  Plan: 'Plan',
  Prompt: 'Prompt',
  Queue: 'Queue',
  QueueIntegrations: 'QueueIntegrations',
  QueueOption: 'QueueOption',
  QuickMessage: 'QuickMessage',
  Rating: 'Rating',
  Schedule: 'Schedule',
  Setting: 'Setting',
  Subscription: 'Subscription',
  Tag: 'Tag',
  Ticket: 'Ticket',
  TicketNote: 'TicketNote',
  TicketTag: 'TicketTag',
  TicketTracking: 'TicketTracking',
  User: 'User',
  UserQueue: 'UserQueue',
  UserRating: 'UserRating',
  Whatsapp: 'Whatsapp',
  WhatsappQueue: 'WhatsappQueue'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
